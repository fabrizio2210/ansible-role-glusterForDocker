---
- name: installa pacchetti
  apt: 
    name: "{{ glusterForDocker_packages }}"
    state: present 
    update_cache: yes 
    cache_valid_time: 86400

- name: Verifica init script per glusterfs
  stat: path=/etc/init.d/glusterfs-server
  register: rimuovi_init_gluster

- name: Rinomina init gluster
  command: "{{ item }}"
  when: rimuovi_init_gluster.stat.exists
  notify: reload systemd
  ignore_errors: yes
  with_items:
  - /etc/init.d/glusterfs-server stop
  - killall glusterd 
  - mv /etc/init.d/glusterfs-server /etc/init.d/BCKglusterfs-server

- name: Copia del service
  copy: src=glusterfs/glusterd.service dest=/etc/systemd/system/glusterd.service mode=0644
  notify: reload systemd

- name: Copia del service per mount condiviso
  copy: src=glusterfs/mnt-cluster.service dest=/etc/systemd/system/mnt-cluster.service mode=0644
  notify: reload systemd

- name: Copia dello script che monta
  copy: src=glusterfs/mount-mnt_cluster.sh dest=/usr/local/bin/mount-mnt_cluster.sh mode=0755
  notify: reload systemd

- name: abilita il mount condiviso
  systemd:
    name: mnt-cluster.service
    enabled: yes
    masked: no

- meta: flush_handlers

- name: Servizio Gluster attivo
  service: name=glusterd state=started enabled=yes

 # Example on how to read info and reuse it in subsequent task
- name: Read device information 
  parted: 
    device: "{{ glusterForDocker_disk }}"
    unit: s
  register: device_info
 
- name: "Crea partizione {{ glusterForDocker_disk }}{{ glusterForDocker_partn }}"
  parted:
    device: "{{ glusterForDocker_disk }}"
    number: "{{ glusterForDocker_partn }}"
    state: present
  when: 
    - glusterForDocker_partn == "1"
    - glusterForDocker_createPartition|bool

- name: "Crea partizione {{ glusterForDocker_disk }}{{ glusterForDocker_partn }}"
  parted:
    device: "{{ glusterForDocker_disk }}"
    number: "{{ glusterForDocker_partn }}"
    part_start: "{{ device_info.partitions[glusterForDocker_partn-2].end + 259 }}s"
    state: present
  when: 
    - glusterForDocker_partn != "1"
    - glusterForDocker_createPartition|bool

- name: "Create a ext4 filesystem on {{ glusterForDocker_disk }}{{ glusterForDocker_partn }}"
  filesystem:
    fstype: ext4
    dev: "{{ glusterForDocker_disk }}{{ glusterForDocker_partn }}"

- name: Mount USB per brick gluster
  mount:
    path: /mnt/disk-usb1
    fstype: ext4
    src: "{{ glusterForDocker_disk }}{{ glusterForDocker_partn }}"
    state: mounted

- name: Creazione del mountpoint
  file: path=/mnt/cluster state=directory
# TODO togliere attributi se brick gia' usato      
#setfattr -x trusted.glusterfs.volume-id $brick_path
#setfattr -x trusted.gfid $brick_path
#rm -rf $brick_path/.glusterfs
#TODO se viene fatto il probe contemporaneamente fallisce.
#- name: create gluster volume
#  gluster_volume:
#    state: present
#    name: main-cluster
#    bricks: /mnt/disk-usb1/vol
#    replicas: "{{play_hosts|length}}"
#    cluster: "{{ item }}"
#  run_once: true
#  with_items: "{{ play_hosts }}"

- set_fact:
    uuids: []

- name: get uuids for existing cluster nodes
  shell: awk -F = '/UUID/ { print $NF }' /var/lib/glusterd/glusterd.info || true
  register: out_uuids
  changed_when: false

- set_fact:
    uuid: "{{ out_uuids.stdout }}"

- name: get list of peers
  shell: "gluster peer status | grep Uuid | awk '{ print $NF }'"
  register: list_peers
  changed_when: false

- debug:
    var: hostvars[item].uuid
  run_once: true
  with_items: "{{ play_hosts }}"

- set_fact:
    uuids: "{{ uuids + [hostvars[item].uuid] }}"
  run_once: true
  with_items: "{{ play_hosts }}"

- set_fact:
    difference_uuid: "{{ list_peers.stdout_lines | difference(uuids) }}"
#TODO
# remove even the brick "gluster volume remove-brick main-cluster replica 2  raspberrypi0:/mnt/disk-usb1/vol force"

- name: Remove spurious node
  shell: "gluster peer detach $(gluster peer status | grep {{ item }} -B1 | grep Hostname | awk '{ print $NF }') force"
  with_items: "{{ difference_uuid }}"
  failed_when: false
  when: 
   - difference_uuid|length > 0

- name: wait some seconds to propagate
  pause:
    seconds: 5

- name: Create a trusted storage pool
  gluster_peer:
    state: present
    nodes: "{{ play_hosts }}"
  run_once: true
  delegate_to: "{{ item }}"
  with_items: "{{ play_hosts }}"

- name: create gluster volume
  gluster_volume:
    state: present
    name: main-cluster
    bricks: /mnt/disk-usb1/vol
    replicas: "{{play_hosts|length}}"
    cluster: "{{ play_hosts }}"
  run_once: true
  delegate_to: "{{ item }}"
  with_items: "{{ play_hosts }}"

- name: monta il mount condiviso
  systemd:
    name: mnt-cluster.service
    state: started

- name: create async directory
  file:
    state: directory
    path: "{{ glusterForDocker_async_folder }}"
    mode: 0755
  when: glusterForDocker_setup_for_async|bool
